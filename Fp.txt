< \r███████\m╗\r██\m╗   \r██\m╗\r███\m╗   \r██\m╗ \r██████\m╗\r████████\m╗\r██\m╗ \r██████\m╗ \r███\m╗   \r██\m╗ \r█████\m╗ \r██\m╗
< \r██\m╔════╝\r██\m║   \r██\m║\r████\m╗  \r██\m║\r██\m╔════╝╚══\r██\m╔══╝\r██\m║\r██\m╔═══\r██\m╗\r████\m╗  \r██\m║\r██\m╔══\r██\m╗\r██\m║
< \r█████\m╗  \r██\m║   \r██\m║\r██\m╔\r██\m╗ \r██\m║\r██\m║        \r██\m║   \r██\m║\r██\m║   \r██\m║\r██\m╔\r██\m╗ \r██\m║\r███████\m║\r██\m║
< \r██\m╔══╝  \r██\m║   \r██\m║\r██\m║╚\r██\m╗\r██\m║\r██\m║        \r██\m║   \r██\m║\r██\m║   \r██\m║\r██\m║╚\r██\m╗\r██\m║\r██\m╔══\r██\m║\r██\m║
< \r██\m║     ╚\r██████\m╔╝\r██\m║ ╚\r████\m║╚\r██████\m╗   \r██\m║   \r██\m║╚\r██████\m╔╝\r██\m║ ╚\r████\m║\r██\m║  \r██\m║\r███████\m╗
< \m╚═╝      ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝╚═╝  ╚═╝╚══════╝

██████╗ ██████╗  ██████╗  ██████╗ ██████╗  █████╗ ███╗   ███╗███╗   ███╗██╗███╗   ██╗ ██████╗
██╔══██╗██╔══██╗██╔═══██╗██╔════╝ ██╔══██╗██╔══██╗████╗ ████║████╗ ████║██║████╗  ██║██╔════╝
██████╔╝██████╔╝██║   ██║██║  ███╗██████╔╝███████║██╔████╔██║██╔████╔██║██║██╔██╗ ██║██║  ███╗
██╔═══╝ ██╔══██╗██║   ██║██║   ██║██╔══██╗██╔══██║██║╚██╔╝██║██║╚██╔╝██║██║██║╚██╗██║██║   ██║
██║     ██║  ██║╚██████╔╝╚██████╔╝██║  ██║██║  ██║██║ ╚═╝ ██║██║ ╚═╝ ██║██║██║ ╚████║╚██████╔╝
╚═╝     ╚═╝  ╚═╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝     ╚═╝╚═╝     ╚═╝╚═╝╚═╝  ╚═══╝ ╚═════╝

██████╗ ██████╗ ██╗███╗   ██╗ ██████╗██╗██████╗ ██╗     ███████╗███████╗
██╔══██╗██╔══██╗██║████╗  ██║██╔════╝██║██╔══██╗██║     ██╔════╝██╔════╝
██████╔╝██████╔╝██║██╔██╗ ██║██║     ██║██████╔╝██║     █████╗  ███████╗
██╔═══╝ ██╔══██╗██║██║╚██╗██║██║     ██║██╔═══╝ ██║     ██╔══╝  ╚════██║
██║     ██║  ██║██║██║ ╚████║╚██████╗██║██║     ███████╗███████╗███████║
╚═╝     ╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝ ╚═════╝╚═╝╚═╝     ╚══════╝╚══════╝╚══════╝
---
| \*\yWhat is FP?

| Functional programming is a way of writing software applications
| using only pure functions and immutable values.
---

| \*\ySide effects

 ➠ Modifying a variable
 ➠ Modifying a data structure in place
 ➠ Setting a field on an object
 ➠ Throwing an exception or halting with an error
 ➠ Printing to the console or reading user input
 ➠ Reading from or writing to a file
 ➠ Drawing on the screen
---
| \*\yWhat questions come to mind?
--

 ➠ How is it even possible to write useful programs at all?

 ➠ How can you possibly write an application without reading input or writing output?
   ➠ How do I write database code?
   ➠ How do I write RESTful code?
   ➠ How do I write GUI code?

 ➠ How can you handling errors without throwing exceptions?

 ➠ If we can’t reassign variables, how do we write simple programs like loops?
---
| \*\yWhat is Imperative programming?
--

| Imperative programming is a programming paradigm that uses statements that \*\ychange a program’s state.

| It focuses on describing the details of \*\yhow a program operates.

> Wikipedia
--

| In FP we don’t tell the computer how to do things, we just tell it what we want.

> Anonymous FP developer
---
| \*\yWhat does it mean?
--

```
def factorial(n: Int) = {
  var product = 1
  for (i <- 1 to n) {
    product = product * i
  }
  product
}

factorial(4)
```
--

Same in FP style?
---
| \*\ySubstitution Model

```
def factorial(n: Int): Int =
  if (n == 0) 1 else n * factorial(n - 1)
```
--

factorial(4)

➠ if (4 == 0) 1 else 4 * factorial(4 - 1)
➠ 4 * factorial(3)
➠ 4 * 3 * factorial(2)
➠ 4 * 3 * 2 * factorial(1)
➠ 4 * 3 * 2 * 1 * factorial(0)
➠ 4 * 3 * 2 * 1 * 1
➠ 24
---
| \*\yThe problem of state
--

In a functional program y = f(x)

No matter what time it is
---
| \*\yComparison

➠ Which is pure? - AssertEquals(f(x), f(x))
➠ Which is simpler?
➠ Which is faster?
➠ Which is more thread safe?
➠ Which one uses more memory?
---
| \*\yMemory
--

Functional programming was invented in 1957 before OO and structured.

But memory was too expensive to make it practical.

But memory is cheap now.
--

1957 - 411,041,792 $/Mbyte
2016 - 0.0027      $/Mbyte

> \mhttp://www.jcmit.com/memoryprice.htm
---
| \*\yBenefits of functional programming

Simpler to

 ➠ read?
 ➠ write
 ➠ maintain
 ➠ debug
 ➠ test
---
| \*\yModularity

 ➠ Reusable
 ➠ Testable
 ➠ Parallelizable
 ➠ Comprehensible
---
| \*\yReusable

```
def sum(xs: List[Int]): Int = xs match {
    case Nil => \y0
    case x :: tail => x \y+ sum(tail)
}

def product(xs: List[Int]): Int = xs match {
    case Nil => \y1
    case x :: tail => x \y* product(tail)
}
```
---
```
def foldRight[A, B](l: List[A], z: B)(f: (A, B) => B): B = l match {
    case Nil => z
    case x :: xs => f(x, foldRight(xs, z)(f))
}
--

def sum(ns: List[Int])        = foldRight(ns, 0)((x, y) => x + y)

def product(ns: List[Double]) = foldRight(ns, 1.0)(_ * _)

def all(ns: List[Boolean])    = foldRight(ns, true)(_ && _)

def any(ns: List[Boolean])    = foldRight(ns, false)(_ || _)

def concat(ns: List[String])  = foldRight(ns, "")(_ + _)
```
--

Descriptive variable names are a code smell.
More precisely, if you can name your variables after more descriptive things
than \mf, a, b, \wand so on, then your code is probably monomorphic.

> \mJohn A De Goes
---
| \*\yConceptual integration
--

semigroup, currying, monad transformer, partial application,
functor, monoid, monad, applicative, lambda, combinator,
typeclass, ADT, higher-kinded type, list comprehension,
traversable, coproduct, ...
---
| \*\yCompositionality

The meaning of the whole is constructed from the meaning of its parts.

Many \mX\ws combine into a composite \mX

Surface complexity is constant as system size increases.
--

42 = 2 * 3 * 7

```
val f: (Int) => String = _.toString

val g: (String) => Boolean = _.isEmpty

val fg = f andThen g
```
---
| \*\yFP => Happiness

➠ Less frustration
➠ More predictable
➠ Less cognitive load
➠ Smaller solution space
➠ Pride
---
| \*\yFailure as a side effect

--
Even Yoda recommends not to use exception handling for control flow. 
“Do or do not, there is no try”
---
| \*\yReferential transparency and purity

An expression \me\w is referentially transparent if,
for all programs \mp,
all occurrences of \me in p
can be replaced by the result of evaluating \me
without affecting the meaning of \mp.
--

A function \mf\w is pure if the expression \mf(x)\w is RT for all RT \mx.
---
| \*\yIn practice

```
def failingFn(i: Int): Int = {
    val y: Int = throw new Exception("fail!")
    try {
        val x = 42 + 5
        x + y
    } catch { case e: Exception => 43 }
}

def failingFn2(i: Int): Int = {
    try {
        val x = 42 + 5
        x + ((throw new Exception("fail!")): Int)
    } catch { case e: Exception => 43 }
}
```

⚠ Exceptions break referential transparency
---
| \*\yWhat is wrong with exceptions?

➠ Exceptions break RT and introduce context dependence

➠ Exceptions can not be catched from other threads

➠ Exceptions are not type-safe

--

 ➠ failingFn: Int => Int - no information about the exception

 ➠ compiler will not force callers to handle the exceptions

 ➠ Unhandled exceptions won’t be detected until runtime

 ➠ Checked exceptions don’t work for higher-order functions

```
def map[A,B](l: List[A])(f: A => B): List[B]
```
---
| \*\yPossible alternatives to exceptions

```
def mean(xs: Seq[Double]): Double =
    if (xs.isEmpty) ??? //throw new ArithmeticException("mean of empty list!")
    else xs.sum / xs.length
```

--
➠ return some sort of bogus value of type Double

➠ return null instead of a value of the needed type
---
| \*\yThe Option data type

```
sealed trait Option[+A]
case class Some[+A](get: A) extends Option[A]
case object None extends Option[Nothing]
```
--

```
def mean(xs: Seq[Double]): Option[Double] =
    if (xs.isEmpty) None
    else Some(xs.sum / xs.length)
```
---
| \*\yBenefits

➠ Composable
➠ Works with HOF
➠ No boilerplate
➠ Type-safe
➠ Force caller to handle all cases
---
| \*\yPossible alternatives to exceptions

➠ Try

```
sealed trait Try[+T]
case class Success[+T](value: T) extends Try[T]
case class Failure[+T](val exception: Throwable) extends Try[T]
```

➠ Either

```
sealed trait Either[+E, +A]
case class Left[+E](value: E) extends Either[E, Nothing]
case class Right[+A](value: A) extends Either[Nothing, A]
```

➠ Custom ADT
---
| \*\yLatency as a side effect

Future[T]

A Future is an object holding a value which may become available at some point.

---
| \*\yI/O - Simple example

```
sealed trait IO[A]
case object ReadLn extends IO[String]
case class WriteLn(s: String) extends IO[Unit]
```
--

```
def getLine: IO[String]
def putLine: String => IO[Unit]
```
--

```
val ask: IO[Unit] = for {
  _    <- putLine("What is your name?")
  name <- getLine
  _    <- putLine("Hello, " + name)
} yield ()
```
--

```
def run[A](program: IO[A]): A = program match {
    case ReadLn     => readLine
    case WriteLn(s) => println(s)
}

run(ask)
```
---
| \*\yFP is easy
--

You think writing list.​stream().map(…).filter(…)

you're doing functional programming?

Wrong. This crazy shit is FP:

> Tagir Valeev
---
```
trait Delta[R <: HList] extends DepFn2[R, R]{
  type Out <: HList
}

object Delta {

  type Aux[R <: HList, O <: HList] = Delta[R]{type Out = O}

  implicit def hnilDelta: Aux[HNil, HNil] = new Delta[HNil] {
    override type Out = HNil

    override def apply(l: HNil, r: HNil): Out = HNil
  }

  implicit def hconsGenDelta[H, GH <: HList, DH <: HList,  T <: HList, DT <: HList]
    (implicit genH: Generic.Aux[H, GH],
              nested: Delta.Aux[GH, DH],
              tailDelta: Delta.Aux[T, DT])
    : Aux[H :: T, DH :: DT] = new Delta[H :: T] {
      override type Out = DH :: DT

      override def apply(l: H :: T, r: H :: T): Out =
        nested(genH.to(l.head), genH.to(r.head)) :: tailDelta(l.tail, r.tail)
    }
}
```
---
| Sources

> \*\yFunctional Programming in Scala
> Paul Chiusano
> Rúnar Bjarnason
> \mhttps://www.youtube.com/watch?v=aa7jh1J4xNs

> \*\yFunctional Programming, Simplified
> Alvin Alexander
> \mhttp://scalafp.com

> \*\yFunctional Programming; What? Why? When?
> Robert C Martin
> \mhttps://www.youtube.com/watch?v=7Zlp9rKHGD4
---

| Thank You!
--

| Q/A?
