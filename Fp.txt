< \r███████\m╗\r██\m╗   \r██\m╗\r███\m╗   \r██\m╗ \r██████\m╗\r████████\m╗\r██\m╗ \r██████\m╗ \r███\m╗   \r██\m╗ \r█████\m╗ \r██\m╗                     
< \r██\m╔════╝\r██\m║   \r██\m║\r████\m╗  \r██\m║\r██\m╔════╝╚══\r██\m╔══╝\r██\m║\r██\m╔═══\r██\m╗\r████\m╗  \r██\m║\r██\m╔══\r██\m╗\r██\m║                     
< \r█████\m╗  \r██\m║   \r██\m║\r██\m╔\r██\m╗ \r██\m║\r██\m║        \r██\m║   \r██\m║\r██\m║   \r██\m║\r██\m╔\r██\m╗ \r██\m║\r███████\m║\r██\m║                     
< \r██\m╔══╝  \r██\m║   \r██\m║\r██\m║╚\r██\m╗\r██\m║\r██\m║        \r██\m║   \r██\m║\r██\m║   \r██\m║\r██\m║╚\r██\m╗\r██\m║\r██\m╔══\r██\m║\r██\m║                     
< \r██\m║     ╚\r██████\m╔╝\r██\m║ ╚\r████\m║╚\r██████\m╗   \r██\m║   \r██\m║╚\r██████\m╔╝\r██\m║ ╚\r████\m║\r██\m║  \r██\m║\r███████\m╗                
< \m╚═╝      ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝╚═╝  ╚═╝╚══════╝                
                                                                                                  
██████╗ ██████╗  ██████╗  ██████╗ ██████╗  █████╗ ███╗   ███╗███╗   ███╗██╗███╗   ██╗ ██████╗     
██╔══██╗██╔══██╗██╔═══██╗██╔════╝ ██╔══██╗██╔══██╗████╗ ████║████╗ ████║██║████╗  ██║██╔════╝     
██████╔╝██████╔╝██║   ██║██║  ███╗██████╔╝███████║██╔████╔██║██╔████╔██║██║██╔██╗ ██║██║  ███╗    
██╔═══╝ ██╔══██╗██║   ██║██║   ██║██╔══██╗██╔══██║██║╚██╔╝██║██║╚██╔╝██║██║██║╚██╗██║██║   ██║    
██║     ██║  ██║╚██████╔╝╚██████╔╝██║  ██║██║  ██║██║ ╚═╝ ██║██║ ╚═╝ ██║██║██║ ╚████║╚██████╔╝    
╚═╝     ╚═╝  ╚═╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝     ╚═╝╚═╝     ╚═╝╚═╝╚═╝  ╚═══╝ ╚═════╝ 
                                                                                                  
██████╗ ██████╗ ██╗███╗   ██╗ ██████╗██╗██████╗ ██╗     ███████╗███████╗                          
██╔══██╗██╔══██╗██║████╗  ██║██╔════╝██║██╔══██╗██║     ██╔════╝██╔════╝                          
██████╔╝██████╔╝██║██╔██╗ ██║██║     ██║██████╔╝██║     █████╗  ███████╗                          
██╔═══╝ ██╔══██╗██║██║╚██╗██║██║     ██║██╔═══╝ ██║     ██╔══╝  ╚════██║                          
██║     ██║  ██║██║██║ ╚████║╚██████╗██║██║     ███████╗███████╗███████║                          
╚═╝     ╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝ ╚═════╝╚═╝╚═╝     ╚══════╝╚══════╝╚══════╝
---
| \*\yWhat is FP?

| Functional programming is a way of writing software applications 
| using only pure functions and immutable values.
---
| \*\yQuestions?
--

What is a pure function?

➠ functions that have no side effects.
--

What are side effects?
---

| \*\yA function has a side effect if it does 
| \*\ysomething other than simply return a result
--

 ➠ Modifying a variable
 ➠ Modifying a data structure in place
 ➠ Setting a field on an object
 ➠ Throwing an exception or halting with an error 
 ➠ Printing to the console or reading user input
 ➠ Reading from or writing to a file
 ➠ Drawing on the screen
---

| \*\yWhat questions come to mind?
--

 ➠ How is it even possible to write useful programs at all?

 ➠ How can you possibly write an application without reading input or writing output?
   ➠ How do I write database code?
   ➠ How do I write RESTful code?
   ➠ How do I write GUI code?

 ➠ How can you handling errors without throwing exceptions?

 ➠ If we can’t reassign variables, how do we write simple programs like loops?
---
| \*\yWhat is Imperative programming?
--

| Imperative programming is a programming paradigm that uses statements that \*\ychange a program’s state.

| It focuses on describing the details of \*\yhow a program operates.

> Wikipedia
--

| In FP we don’t tell the computer how to do things, we just tell it what we want.

> Anonymous FP developer
---
| \*\yWhat does it mean?
--

```
import scala.collection.mutable.ListBuffer

def double(ints: List[Int]): List[Int] = {
    val buffer = new ListBuffer[Int]()
    for (i <- ints) {
        buffer += i * 2
    }
    buffer.toList
}

val l = List(1, 2, 3)

double(l)
```
--

Same in FP style?
---
| \*\yAnother example - Fibonacci numbers
--

```
import scala.math.BigInt
lazy val fibs: Stream[BigInt] = BigInt(0) #::
                                BigInt(1) #::
                                fibs.zip(fibs.tail).map { n => n._1 + n._2 }
```
---
| \*\yCalculating prime numbers

```
val ps: Stream[Int] = 2 #:: Stream.from(3).filter(i =>
   ps.takeWhile(j => j * j <= i).forall(k => i % k > 0))
```

Hint: If i is not a multiple of a lesser prime number, then i is prime.
---
| \*\yModifying a variable
--

First, here’s an imperative version of a sum method:

```
def sum(ints: List[Int]): Int = {
    var sum = 0
    for (i <- ints) {
        sum += i
    }
    sum
}
```
--

Next, here’s a Scala/FP version of that same method:

```
def sum(xs: List[Int]): Int = xs match {
    case Nil => 0
    case x :: tail => x + sum(tail)
}
```
---
| \*\yFailure as a side effect

Referential transparency and purity
--

An expression \me\w is referentially transparent if, 
for all programs \mp, 
all occurrences of \me in p 
can be replaced by the result of evaluating \me 
without affecting the meaning of \mp.
--

A function \mf\w is pure if the expression \mf(x)\w is RT for all RT \mx.
---
| \*\yIn practice

```
def failingFn(i: Int): Int = {
    val y: Int = throw new Exception("fail!")
    try {
        val x = 42 + 5
        x + y
    } catch { case e: Exception => 43 } 
}

def failingFn2(i: Int): Int = { 
    try {
        val x = 42 + 5
        x + ((throw new Exception("fail!")): Int) 
    } catch { case e: Exception => 43 } 
}
```

⚠ Exceptions break referential transparency
---
| \*\yWhat is wrong with exceptions?

➠ Exceptions break RT and introduce context dependence

➠ Exceptions can not be catched from other threads

➠ Exceptions are not type-safe

--

 ➠ failingFn: Int => Int - no information about the exception

 ➠ compiler will not force callers to handle the exceptions

 ➠ Unhandled exceptions won’t be detected until runtime

 ➠ Checked exceptions don’t work for higher-order functions

```
def map[A,B](l: List[A])(f: A => B): List[B]
```
---
| \*\yPossible alternatives to exceptions

```
def mean(xs: Seq[Double]): Double =
    if (xs.isEmpty) ??? //throw new ArithmeticException("mean of empty list!")
    else xs.sum / xs.length
```

--
➠ return some sort of bogus value of type Double

➠ return null instead of a value of the needed type
---
| \*\yThe Option data type

```
sealed trait Option[+A]
case class Some[+A](get: A) extends Option[A] 
case object None extends Option[Nothing]
```
--

```
def mean(xs: Seq[Double]): Option[Double] = 
    if (xs.isEmpty) None
    else Some(xs.sum / xs.length)
```
---
| \*\yExample

```
case class Employee(name: String, department: String)

def lookupByName(name: String): Option[Employee] = ???
```
--

```
val dept: String = lookupByName("Joe").
    map(_.department).
    filter(_ != "Accounting").
    getOrElse("Default Dept")
```
---
| \*\yBenefits

➠ Composable
➠ Works with HOF
➠ No boilerplate
➠ Type-safe
➠ Force caller to handle all cases
---
| \*\yPossible alternatives to exceptions

➠ Try

```
sealed trait Try[+T]
case class Success[+T](value: T) extends Try[T]
case class Failure[+T](val exception: Throwable) extends Try[T]
```

➠ Either

```
sealed trait Either[+E, +A]
case class Left[+E](value: E) extends Either[E, Nothing] 
case class Right[+A](value: A) extends Either[Nothing, A]
```

➠ Custom ADT
---
| \*\yLatency as a side effect

Future[T]

A Future is an object holding a value which may become available at some point.

---
| \*\yI/O - Simple example

```
sealed trait IO[A]
case object ReadLn extends IO[String]
case class WriteLn(s: String) extends IO[Unit]
```
--

```
def getLine: IO[String]
def putLine: String => IO[Unit]
```
--

```
val ask: IO[Unit] = for {
  _    <- putLine("What is your name?")
  name <- getLine
  _    <- putLine("Hello, " + name)
} yield ()
```
--

```
def run[A](program: IO[A]): A = program match {
    case ReadLn     => readLine
    case WriteLn(s) => println(s)
}

run(ask)
```
---
| \*\yBenefits of functional programming

---
| \*\yModularity

 ➠ Reusable
 ➠ Testable
 ➠ Parallelizable
 ➠ Comprehensible
---
| \*\yReusable
--

```
def sum(xs: List[Int]): Int = xs match {
    case Nil => \y0
    case x :: tail => x \y+ sum(tail)
}

def product(xs: List[Int]): Int = xs match {
    case Nil => \y1
    case x :: tail => x \y* product(tail)
}
```
---
```
def foldRight[A, B](l: List[A], z: B)(f: (A, B) => B): B = l match {
    case Nil => z
    case x :: xs => f(x, foldRight(xs, z)(f)) 
}
--

def sum(ns: List[Int])        = foldRight(ns, 0)((x, y) => x + y)

def product(ns: List[Double]) = foldRight(ns, 1.0)(_ * _)

def all(ns: List[Boolean])    = foldRight(ns, true)(_ && _)

def any(ns: List[Boolean])    = foldRight(ns, false)(_ || _)

def concat(ns: List[String])  = foldRight(ns, "")(_ + _)
```
---
| \*\yTestable

Example with side effect

```
class Cafe {
    def buyCoffee(cc: CreditCard): Coffee = {
        val cup = new Coffee()
        cc.charge(cup.price)
        cup
    }
}
```
--

According to the definition of RT \mp(buyCoffee(aliceCreditCard)) 
must be the same as \mp(new Coffee()), 
for any p

This clearly doesn’t hold

---
| \*\yAfter Refactoring

```
class Cafe {
    def buyCoffee(cc: CreditCard, p: Payments): Coffee = {
        val cup = new Coffee() 
        p.charge(cc, cup.price) 
        cup
    } 
}
```
---
| \*\yA functional solution: removing the side effects

```
class Cafe {
    def buyCoffee(cc: CreditCard): (Coffee, Charge) = {
        val cup = new Coffee() 
        (cup, Charge(cc, cup.price))
    } 
}
```
--
| \*\ySimple test

```
(cc: CreditCard) => {
    val (cafee, charge) = buyCafee(cc)
    charge.amount == cofee.price && charge.card == cc
}
```
---
| \*\yConceptual integration
--

semigroup, currying, monad transformer, partial application, 
functor, monoid, monad, applicative, lambda, combinator, 
typeclass, ADT, higher-kinded type, list comprehension, 
traversable, coproduct, ...
---
| \*\yCompositionality

The meaning of the whole is constructed from the meaning of its parts.

Many \mX\ws combine into a composite \mX

Surface complexity is constant as system size increases.
--

42 = 2 * 3 * 7

val fg = f andThen g
---
| \*\yFP => Happiness

➠ Less frustration
➠ More predictable
➠ Less cognitive load
➠ Smaller solution space
➠ Pride
---
| Sources

> \*\yFunctional Programming in Scala
> Paul Chiusano
> Rúnar Bjarnason

> \*\yFunctional Programming, Simplified
> Alvin Alexander
---

| Thank You!
--

| Q/A?