| \*\yMonoids\s: The \mCats' Way
/

| Vilmos Feher

| Source: Advanced Scala with Cats

---

| Let’s start by looking a few types and operations, 
| and see what common principles we can extract.
--

Integer addition
--

Closed binary operation: Int + Int = Int
--

```
2 + 1
```
--

Identity element: 0
--

a + 0 == 0 + a == a for any Int a
--

```
2 + 0
```
--

Associativity
--
```
(1 + 2) + 3
```
--
```
1 + (2 + 3)
```
---

| Integer multiplication
--

Identity element: 1
--

```
(1 * 2) * 3
```
--

```
1 * (2 * 3)
```
--

```
2 * 3
```
---

| String and sequence concatenation
--

Identity element: "" / Seq[T].empty
--

```
"" ++ "Hello"
```
--

```
("One" ++ "Two") ++ "Three"
```
--

```
"One" ++ ("Two" ++ "Three")
```
---

| Definition of a \yMonoid
--

An operation \mcombine \wwith type (A, A) => A; and 
--

An element \mempty \wof type A.
--

The following laws must hold:
--

- combine is associative, meaning combine(x, combine(y, z)) == combine(combine(x, y), z) for all x, y, and z, in A;
--

- empty is an identity of combine, meaning combine(a, empty) == combine(empty, a) == a for any a in A.
---

| A simplified version of the definition from Cats is:
--

trait Monoid[A] {
  def combine(x: A, y: A): A 
  def empty: A
}
--

where combine is the binary operation and empty is the identity.
---

| \yExcercise

| How many monoids can you define for Boolean?
--

| 1. operator && and identity true
--

```
import cats.Monoid

implicit val booleanAndMonoid: Monoid[Boolean] = new Monoid[Boolean] { 
  def combine(a: Boolean, b: Boolean) = a && b
  def empty = true
}
```
---

| 2. operator || and identity false
--

```
implicit val booleanOrMonoid: Monoid[Boolean] = new Monoid[Boolean] { 
  def combine(a: Boolean, b: Boolean) = a || b
  def empty = false
}
```
---

| 3. exclusive or with identity false
--

```
implicit val booleanXorMonoid: Monoid[Boolean] = new Monoid[Boolean] { 
  def combine(a: Boolean, b: Boolean) = (a && !b) || (!a && b)
  def empty = false
}
---

| 4. exclusive nor (the negation of exclusive or) with identity true
--

```
implicit val booleanXnorMonoid: Monoid[Boolean] = new Monoid[Boolean] { 
  def combine(a: Boolean, b: Boolean) = (!a || b) && (a || !b)
  def empty = true
}
```
---

| \yExcercise

| How about Sets?
--

| Set union forms a monoid along with the empty set:
--

```
implicit def setUnionMonoid[A]: Monoid[Set[A]] = new Monoid[Set[A]] { 
  def combine(a: Set[A], b: Set[A]) = a union b
  def empty = Set.empty[A]
}
```
---

| Set intersection?
--

| there is no identity element :(
--

We call this weaker structure a semi-group — a combine operation without an empty
--

```
import cats.Semigroup

implicit def setIntersectionSemigroup[A]: Semigroup[Set[A]] = new Semigroup[Set[A]] {
  def combine(a: Set[A], b: Set[A]) = a intersect b 
}
```
---

| \yMonoids in \mCats
--

1. The \yMonoid Type Class is \mcats.\yMonoid
--

\yMonoid extends \wSemigroup
---

2. Instances
--

```
import cats.Monoid

import cats.std.string._

Monoid[String].combine("Hi ", "there")
```
--

which is equivalent to
--

```
Monoid.apply[String].combine("Hi ", "there")
```
---

Default instance
--

```
import cats.Monoid

import cats.std.string._

val instance = Monoid[String]

instance.combine("Monoids FTW!", instance.empty)
```
---

| \yMonoid Syntax
--

Cats provides syntax for the combine method in the form of the |+| operator
--

it comes from Semigroup - we should import it
--

```
import cats.syntax.semigroup._

import cats.std.string._

val stringResult = "Hi " |+| "there" |+| Monoid[String].empty

import cats.std.int._

val intResult = 1 |+| 2 |+| Monoid[Int].empty
```
---

| Exercise: Adding All The Things
--

The cutting edge SuperAdder v3.5a-32 is the world’s first choice for adding together numbers. 
The main function in the program has signature 
\m def add(items: List[Int]): Int. 
--

In a tragic accident this code is deleted! 
--

Rewrite the method and save the day!

---

We can write the addition as a simple foldLeft using 0 and the + operator:
--

```
def add(items: List[Int]): Int = items.foldLeft(0)(_ + _)
```
--

We can alternatively write the fold using Monoids
--

```
import cats.Monoid

import cats.syntax.semigroup._

def add(items: List[Int]): Int = items.foldLeft(Monoid[Int].empty)(_ |+| _)
```
---

Well done! 
SuperAdder’s market share continues to grow, and now there is demand for additional functionality. 
People now want to add List[Option[Int]]. 
Change add so this is possible. 
The SuperAdder code base is of the highest quality, so make sure there is no code duplication!
---

| Let's try to use \yMonoids
--

```
import cats.Monoid

import cats.syntax.semigroup._

def add[A](items: List[A])(implicit monoid: Monoid[A]): A = 
  items.foldLeft(monoid.empty)(_ |+| _)
```
--

We can optionally use Scala’s context bound syntax to write the same code in a friendlier way:
--

```
def add[A: Monoid](items: List[A]): A = 
  items.foldLeft(Monoid[A].empty)(_ |+| _)
```
---

We can use this code to add values of type Int and Option[Int] as requested:
--

```
import cats.std.int._

add(List(1, 2, 3))
```

--

```
import cats.std.option._

add(List(Some(1), None, Some(2), None, Some(3)))
```
--

Let's try this:
--

```
add(List(Some(1), Some(2), Some(3)))
```
--

Upps!
--

This happens because the inferred type of the list is List[Some[Int]], 
while Cats will only generate a Monoid for Option[Int].
---

SuperAdder is entering the POS (point-of-sale, not the other POS) market. 
Now we want to add up Orders:

case class Order(totalCost: Double, quantity: Double)

We need to release this code really soon so we can’t make any modifications to add.

Make it so!
---

```
case class Order(totalCost: Double, quantity: Double)

object Order {
  implicit val monoid: Monoid[Order] = new Monoid[Order] {
    def combine(o1: Order, o2: Order) =
      new Order(o1.totalCost + o2.totalCost, o1.quantity + o2.quantity)
    def empty = new Order(0, 0) 
  }
}
```
--

Let's try it!
--

```
add(List(Order(1.1, 2.2), Order(1.0, 2.0), Order(3.4, 4.7)))
```
---

| Controlling Instance Selection

- What is the relationship between an instance defined on a type and its subtypes?
--

- How do we choose between type class instances when there are many available?
---

| Type Class Variance
--

/
Type Class Variance              Invariant         Covariant         Contravariant
/
Supertype instance used?         No                No                Yes
More specific type preferred?    Yes               Yes               No
/
--

Cats generally prefers to use invariant type classes. 

This allows us to specify more specific instances for subtypes if we want.
---

Solution for the problem:
--

- type annotation or
--

- smart constructors
--

```
import cats.std.option._

import cats.syntax.option._

val some1 = 1.some

val noneInt = none[Int]
```
---

| Identically Typed Instances
--

The other issue is choosing between type class instances when several are available for a specific type.
--

For example, how do we select the monoid for integer multiplication instead of the monoid for integer addition?
--

Cats handles this by only providing at most one implicit monoid for each type.
---

The default monoid for Int is addition:
--

```
import cats.Monoid

import cats.std.int._

Monoid[Int].combine(2, 3)
```
--

but we can summon the multiplication monoid explicitly:
--

```
val multMonoid: Monoid[Int] = 
  cats.std.int.intAlgebra.multiplicative

multMonoid.combine(2, 3)
```
---

| Cats doesn’t provide a default monoid for Boolean, 
| although we can summon monoids for conjuction and disjunction explicitly:
--

```
val conjMonoid: Monoid[Boolean] = 
  cats.std.boolean.booleanAlgebra.multiplicative

val disjMonoid: Monoid[Boolean] = 
  cats.std.boolean.booleanAlgebra.additive

val conj = conjMonoid.combine(true, false)

val disj = disjMonoid.combine(true, false)
```
---

If we want to select a specific monoid for use with the |+| syntax, 
we need only assign it to an implicit val of the correct type. 
--

This will override the monoids imported from cats.std:
--

```
import cats.syntax.semigroup._

implicit val multMonoid: Monoid[Int] = 
  cats.std.int.intAlgebra.multiplicative

2 |+| 3
```
---
| Let's check the laws
--

```
import cats._, cats.std.all._

import algebra.laws.GroupLaws

val rs1 = GroupLaws[Int].monoid(Monoid.additive[Int])

rs1.all.check
```
---

| Thank You!
--

| No questions please :)
---